import re  # Импортируем модуль регулярных выражений для обработки строк
from collections import defaultdict  # Импортируем defaultdict для подсчёта значений
from datetime import datetime
'''
Мальцев Дмитрий, АСУ9-24-1м

Задача 3. Начинающий предприниматель Александр открыл свою первую пиццерию. 
Для учета заказов он использует максимально простой инструмент – записывает в блокнот 
информацию о дате заказа, названии пиццы и стоимости заказа (стоимость одной и той же 
пиццы даже в один и тот же день может быть разной – это зависит от дополнительных 
ингредиентов, которые пожелал добавить клиент, но которые Александр в своем блокноте 
никак не учитывает). По прошествии нескольких дней Александр хочет извлечь из своих 
записей какую-нибудь полезную информацию. Напишите программу, которая будет 
выводить: 
а) список всех пицц с указанием, сколько раз их заказывали; список должен быть 
отсортирован по убыванию количества заказов, то есть первой в списке должна оказаться 
самая популярная пицца; 
б) список всех дат с указанием суммарной стоимости проданных в этот день пицц; 
список должен быть отсортирован хронологически; 
в) информацию о самом дорогом заказе; 
г) среднюю стоимость заказа (среднее арифметическое по всем стоимостям). 
Поскольку исходный текстовый файл заполняется вручную, то формат данных может 
быть разным (даже в рамках одного файла). Гарантируется только, что каждая строка 
файла содержит информацию об одном заказе, и в каждой строке указаны 3 значения: дата, 
название и стоимость. 
Нужно учесть следующие варианты: - значения могут быть разделены запятой, точкой с запятой или просто пробелом; 
- в дате дата, месяц и год могут быть разделены точкой или косой чертой (/); 
- название пиццы может быть указано в кавычках или без них; 
- стоимость может быть целым или дробным числом (если число дробное, то в нем не более 2 знаков в дробной части, 
при этом дробная часть от целой может быть отделена точкой или запятой). 
Если строка не соответствует указанному формату (с учетом указанных вариантов), то такую строку нужно пропускать. 
'''

"""
Функция для обработки строки заказа

Парсит строку заказа и извлекает дату, название пиццы и стоимость.
Возвращает кортеж (дата, пицца, стоимость) или None, если строка некорректна.
"""
def parse_order(строка):
    # Регулярное выражение для поиска даты (форматы: 20.02.2025, 20/02/2025)
    строка = строка.strip('"') # убираем кавычки
    date_pattern = r"\d{2}[./]\d{2}[./]\d{4}"
    date_match = re.search(date_pattern, строка)
    if not date_match:
        print('Ошибка [1]!', строка)
        return None
    дата = date_match.group().replace('/', '.')             # Приводим дату к единому формату: 20.02.2025
    строка = строка.replace(date_match.group(), '').strip() # Убираем найденную дату из строки
    if строка and строка[0] in {',', ';', ' '}:
        строка = строка[1:].strip()                         # Удаляем следующий символ, если это разделитель
    #print('строка: '+строка)
    # Разделители в строке (запятая, точка с запятой или пробел)
    слова = re.split(r'[;, ]+', строка)
    #print('слова:', слова)
    
    # Если в строке осталось менее 2 частей (название + цена), то это ошибка
    if len(слова) < 2:
        print('Ошибка [2]!', строка)
        return None
    
    # Проверяем, являются ли два последних элемента числами (на самом деле хватило бы и предпоследнего). По существу: проверка на дробность числа
    if len(слова) > 2 and слова[-2].isdigit() and слова[-1].isdigit():
        цена = '.'.join(слова[-2:])         # Объединяем два последних элемента через точку
        слова = слова[:-2]                  # Убираем их из списка
    else:
        цена = слова[-1].replace(',', '.')  # Обычная замена запятой на точку в числе
        слова = слова[:-1]                  # Убираем цену из списка    
    #print('цена: '+цена)
    try:
        цена = float(цена)
    except ValueError:
        print('Ошибка [3]!', строка)
        return None  # Если цена не число, пропускаем строку
    #print('слова:', слова)

    # Остальные элементы - название пиццы
    название = ' '.join(слова).strip('"')   # Убираем кавычки, если есть
    #print('название: '+название)
    #print()
    return дата, название, цена

# Функция для обработки файла с заказами и анализа данных и вывода статистики.
def analyze_orders(файл):
    Количество = defaultdict(int)       # Счётчик количества заказов пицц
    Дата = defaultdict(float)           # Счётчик выручки по датам
    Массив = []                         # Список всех заказов для поиска самого дорогого
    
    with open(файл, 'r', encoding='utf-8') as файл:
        for строка in файл:
            список = parse_order(строка.strip())    # Обрабатываем строку
            if список:
                дата, название, цена = список
                Количество[название] += 1           # Увеличиваем счётчик пиццы
                Дата[дата] += цена                  # Прибавляем стоимость заказа в дату
                Массив.append(список)               # Добавляем в список всех заказов
    
    # Выводим статистику
    print("а)")
    for названиеФ, количествоФ in sorted(Количество.items(), key=lambda x: x[1], reverse=True):
        print(f"{названиеФ} - {количествоФ}")
    
    print("б)")
    # сортировка дат в хронологическом порядке (сначала новые)
    Сортировка_Дат = sorted(Дата.items(), key=lambda x: datetime.strptime(x[0], "%d.%m.%Y"), reverse=True)
    for датаФ, ценаФ in Сортировка_Дат:
        print(f"{датаФ} {ценаФ:.2f}")

    print("в)")
    Элементы = max(Массив, key=lambda x: x[2])
    print(f"{Элементы[0]} {Элементы[1]} {Элементы[2]:.2f}")
    
    print("г)")
    Сумма = sum(x[2] for x in Массив) / len(Массив)
    print(f"{Сумма:.2f}")

# Запускаем анализ файла
файл = "Lab01_task3_input.txt"
analyze_orders(файл)

'''
[ Вывод ]

а)
Пепперони - 4     
Четыре сыра - 3   
Гавайская - 2     
Баварская - 2     
б)
03.03.2025 480.00 
02.03.2025 400.00 
01.03.2025 830.49 
28.02.2025 1694.99
27.02.2025 388.80 
21.02.2025 399.90 
20.02.2025 440.00 
в)
03.03.2025 Баварская 480.00
г)
421.29
'''